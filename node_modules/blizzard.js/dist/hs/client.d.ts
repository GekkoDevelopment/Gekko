import { Blizzard, BlizzardClient, Headers } from '../core';
import { ResourceResponse, ResourceOptions } from '../resources';
import * as hs from '../resources/hs';
export interface HSClient extends BlizzardClient {
    cardSearch<T = any>(args: ResourceOptions<hs.CardSearchOptions>, headers?: Headers): ResourceResponse<T>;
    card<T = any>(args: ResourceOptions<hs.CardOptions>, headers?: Headers): ResourceResponse<T>;
    cardBacks<T = any>(args: ResourceOptions<hs.CardBacksOptions>, headers?: Headers): ResourceResponse<T>;
    deck<T = any>(args: ResourceOptions<hs.DeckOptions>, headers?: Headers): ResourceResponse<T>;
    metadata<T = any>(args?: null | ResourceOptions<hs.MetaDataOptions>, headers?: Headers): ResourceResponse<T>;
}
export declare class HS extends Blizzard implements HSClient {
    cardSearch: (args: Partial<import("../core").ClientOptions> & hs.CardSearchOptions, headers?: Headers | undefined) => ResourceResponse<any>;
    card: (args: Partial<import("../core").ClientOptions> & hs.CardOptions, headers?: Headers | undefined) => ResourceResponse<any>;
    cardBacks: (args: Partial<import("../core").ClientOptions> & hs.CardBacksOptions, headers?: Headers | undefined) => ResourceResponse<any>;
    deck: (args: Partial<import("../core").ClientOptions> & hs.DeckOptions, headers?: Headers | undefined) => ResourceResponse<any>;
    metadata: (args: Partial<import("../core").ClientOptions> & hs.MetaDataOptions, headers?: Headers | undefined) => ResourceResponse<any>;
}
