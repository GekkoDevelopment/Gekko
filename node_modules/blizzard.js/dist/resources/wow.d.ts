import { Locales } from '../endpoints';
import { Resource } from './types';
type NamespaceOptions = 'profile' | 'static' | 'dynamic' | 'static-classic' | 'dynamic-classic';
type CharacterOptions = {
    realm: string;
    name: string;
};
type SearchOptions = {
    orderby?: string | string[];
    page?: number;
};
type SearchParams = {
    orderby?: string;
    _page?: number;
};
export type AccountProfileOptions = Record<string, unknown>;
export declare const accountProfile: (namespace: Extract<NamespaceOptions, 'profile'>) => Resource;
export type AccountCharacterProfileOptions = {
    realm: number;
    character: number;
};
export declare const accountCharacterProfile: (namespace: Extract<NamespaceOptions, 'profile'>, args: AccountCharacterProfileOptions) => Resource;
export type AccountCollectionsOptions = {
    resource?: 'mounts' | 'pets';
};
export declare const accountCollections: (namespace: Extract<NamespaceOptions, 'profile'>, args?: null | AccountCollectionsOptions) => Resource;
export type AccountCharacterAchievementsOptions = CharacterOptions & {
    stats?: boolean;
};
export declare const characterAchievements: (namespace: Extract<NamespaceOptions, 'profile'>, args: AccountCharacterAchievementsOptions) => Resource;
export type CharacterAppearanceOptions = CharacterOptions;
export declare const characterAppearance: (namespace: Extract<NamespaceOptions, 'profile'>, args: CharacterAppearanceOptions) => Resource;
export type CharacterCollectionsOptions = CharacterOptions & {
    resource?: 'mounts' | 'pets';
};
export declare const characterCollections: (namespace: Extract<NamespaceOptions, 'profile'>, args: CharacterCollectionsOptions) => Resource;
export type CharacterEncountersOptions = CharacterOptions & {
    resource?: 'dungeons' | 'raids';
};
export declare const characterEncounters: (namespace: Extract<NamespaceOptions, 'profile'>, args: CharacterEncountersOptions) => Resource;
export type CharacterEquipmentOptions = CharacterOptions;
export declare const characterEquipment: (namespace: Extract<NamespaceOptions, 'profile'>, args: CharacterEquipmentOptions) => Resource;
export type CharacterHunterPetsOptions = CharacterOptions;
export declare const characterHunterPets: (namespace: Extract<NamespaceOptions, 'profile'>, args: CharacterHunterPetsOptions) => Resource;
export type CharacterMediaOptions = CharacterOptions;
export declare const characterMedia: (namespace: Extract<NamespaceOptions, 'profile'>, args: CharacterMediaOptions) => Resource;
export type CharacterMythicKeystoneOptions = CharacterOptions & {
    season?: number;
};
export declare const characterMythicKeystone: (namespace: Extract<NamespaceOptions, 'profile'>, args: CharacterMythicKeystoneOptions) => Resource;
export type CharacterProfessionsOptions = CharacterOptions;
export declare const characterProfessions: (namespace: Extract<NamespaceOptions, 'profile'>, args: CharacterProfessionsOptions) => Resource;
export type CharacterProfileOptions = CharacterOptions & {
    status?: boolean;
};
export declare const characterProfile: (namespace: Extract<NamespaceOptions, 'profile'>, args: CharacterProfileOptions) => Resource;
export type CharacterPVPOptions = CharacterOptions & {
    bracket?: string;
};
export declare const characterPVP: (namespace: Extract<NamespaceOptions, 'profile'>, args: CharacterPVPOptions) => Resource;
export type CharacterQuestsOptions = CharacterOptions & {
    completed?: boolean;
};
export declare const characterQuests: (namespace: Extract<NamespaceOptions, 'profile'>, args: CharacterQuestsOptions) => Resource;
export type CharacterReputationsOptions = CharacterOptions;
export declare const characterReputations: (namespace: Extract<NamespaceOptions, 'profile'>, args: CharacterReputationsOptions) => Resource;
export type CharacterSoulbindsOptions = CharacterOptions;
export declare const characterSoulbinds: (namespace: Extract<NamespaceOptions, 'profile'>, args: CharacterSoulbindsOptions) => Resource;
export type CharacterSpecializationsOptions = CharacterOptions;
export declare const characterSpecializations: (namespace: Extract<NamespaceOptions, 'profile'>, args: CharacterSpecializationsOptions) => Resource;
export type CharacterStatisticsOptions = CharacterOptions;
export declare const characterStatistics: (namespace: Extract<NamespaceOptions, 'profile'>, args: CharacterStatisticsOptions) => Resource;
export type CharacterTitlesOptions = CharacterOptions;
export declare const characterTitles: (namespace: Extract<NamespaceOptions, 'profile'>, args: CharacterTitlesOptions) => Resource;
export type GuildOptions = {
    realm: string;
    name: string;
    resource?: 'activity' | 'achievements' | 'roster';
};
export declare const guild: (namespace: Extract<NamespaceOptions, 'profile'>, args: GuildOptions) => Resource;
export type AchievementOptions = {
    id?: number;
    media?: boolean;
};
export declare const achievement: (namespace: Extract<NamespaceOptions, 'static'>, args?: null | AchievementOptions) => Resource;
export type AchievementCategoryOptions = {
    id?: number;
};
export declare const achievementCategory: (namespace: Extract<NamespaceOptions, 'static'>, args?: null | AchievementCategoryOptions) => Resource;
export type AuctionHouseOptions = {
    id: number;
};
export declare const auctionHouse: (namespace: Extract<NamespaceOptions, 'dynamic'>, args: AuctionHouseOptions) => Resource;
export type AzeriteEssenceOptions = {
    id?: number;
    media?: boolean;
};
export declare const azeriteEssence: (namespace: Extract<NamespaceOptions, 'static'>, args?: null | AzeriteEssenceOptions) => Resource;
export type AzeriteEssenceSearchOptions = SearchOptions & {
    id: number;
};
export declare const azeriteEssenceSearch: (namespace: Extract<NamespaceOptions, 'static'>, args: AzeriteEssenceSearchOptions) => Resource<SearchParams & {
    'allowed_specializations.id': number;
}>;
export type CommoditiesOptions = Record<string, unknown>;
export declare const commodities: (namespace: Extract<NamespaceOptions, 'dynamic'>) => Resource;
export type ConnectedRealmOptions = {
    id?: number;
};
export declare const connectedRealm: (namespace: Extract<NamespaceOptions, 'dynamic' | 'dynamic-classic'>, args?: null | ConnectedRealmOptions) => Resource;
export type ConnectedRealmSearchOptions = SearchOptions & {
    status: 'UP' | 'DOWN';
    timezone?: string;
};
export declare const connectedRealmSearch: (namespace: Extract<NamespaceOptions, 'dynamic' | 'dynamic-classic'>, args: ConnectedRealmSearchOptions) => Resource<SearchParams & {
    'status.type': string;
    'realms.timezone'?: string;
}>;
export type CovenantOptions = {
    id: number;
    media?: boolean;
};
export declare const covenant: (namespace: Extract<NamespaceOptions, 'static'>, args?: null | CovenantOptions) => Resource;
export type SoulbindOptions = {
    id?: number;
};
export declare const soulbind: (namespace: Extract<NamespaceOptions, 'static'>, args?: null | SoulbindOptions) => Resource;
export type ConduitOptions = {
    id?: number;
};
export declare const conduit: (namespace: Extract<NamespaceOptions, 'static'>, args?: null | ConduitOptions) => Resource;
export type CreatureOptions = {
    id: number;
    media?: boolean;
};
export declare const creature: (namespace: Extract<NamespaceOptions, 'static' | 'static-classic'>, args: CreatureOptions) => Resource;
export type CreatureFamilyOptions = {
    id?: number;
    media?: boolean;
};
export declare const creatureFamily: (namespace: Extract<NamespaceOptions, 'static' | 'static-classic'>, args?: null | CreatureFamilyOptions) => Resource;
export type CreatureTypeOptions = {
    id?: number;
};
export declare const creatureType: (namespace: Extract<NamespaceOptions, 'static' | 'static-classic'>, args?: null | CreatureTypeOptions) => Resource;
export type CreatureSearchOptions<T = string, P = Locales> = SearchOptions & {
    name: T;
    locale: P;
};
export declare const creatureSearch: <T extends string, P extends Locales>(namespace: Extract<NamespaceOptions, 'static' | 'static-classic'>, args: CreatureSearchOptions<T, P>) => Resource<SearchParams & Record<`name.${P}`, T>>;
export type GuildCrestOptions = {
    resource: 'border' | 'emblem';
    id: number;
};
export declare const guildCrest: (namespace: Extract<NamespaceOptions, 'static' | 'static-classic'>, args?: null | GuildCrestOptions) => Resource;
export type ItemOptions = {
    resource?: never;
    id: number;
    sub?: never;
    media?: boolean;
} | {
    resource: 'class';
    id?: number;
    sub?: number;
    media?: never;
} | {
    resource: 'set';
    id?: number;
    sub?: never;
    media?: never;
};
export declare const item: (namespace: Extract<NamespaceOptions, 'static' | 'static-classic'>, args: ItemOptions) => Resource;
export type ItemSearchOptions<T = string, P = Locales> = SearchOptions & {
    name: T;
    locale: P;
};
export declare const itemSearch: <T extends string, P extends Locales>(namespace: Extract<NamespaceOptions, 'static' | 'static-classic'>, args: ItemSearchOptions<T, P>) => Resource<SearchParams & Record<`name.${P}`, T>>;
export type JournalOptions = {
    resource: 'instance';
    id?: number;
    media?: boolean;
} | {
    resource: 'encounter' | 'expansion';
    id?: number;
    media?: never;
};
export declare const journal: (namespace: Extract<NamespaceOptions, 'static'>, args: JournalOptions) => Resource;
export type MediaSearchOptions = SearchOptions & {
    tag: string;
};
export declare const mediaSearch: (namespace: Extract<NamespaceOptions, 'static' | 'static-classic'>, args: MediaSearchOptions) => Resource<SearchParams & {
    _tag: string;
}>;
export type ModifiedCraftingOptions = {
    resource?: 'category' | 'reagent';
    id?: number;
};
export declare const modifiedCrafting: (namespace: Extract<NamespaceOptions, 'static'>, args?: null | ModifiedCraftingOptions) => Resource;
export type MountOptions = {
    id?: number;
};
export declare const mount: (namespace: Extract<NamespaceOptions, 'static'>, args?: null | MountOptions) => Resource;
export type MountSearchOptions<T = string, P = Locales> = SearchOptions & {
    name: T;
    locale: P;
};
export declare const mountSearch: <T extends string, P extends Locales>(namespace: Extract<NamespaceOptions, 'static'>, args: MountSearchOptions<T, P>) => Resource<SearchParams & Record<`name.${P}`, T>>;
export type MythicKeystoneOptions = {
    resource?: 'dungeon' | 'period' | 'season';
    id?: number;
};
export declare const mythicKeystone: (namespace: Extract<NamespaceOptions, 'dynamic'>, args?: null | MythicKeystoneOptions) => Resource;
export type MythicKeystoneAffixOptions = {
    id?: number;
    media?: boolean;
};
export declare const mythicKeystoneAffix: (namespace: Extract<NamespaceOptions, 'static'>, args?: null | MythicKeystoneAffixOptions) => Resource;
export type MythicKeystoneLeaderboardOptions = {
    realm: number;
    dungeon?: number;
    period?: number;
};
export declare const mythicKeystoneLeaderboard: (namespace: Extract<NamespaceOptions, 'dynamic'>, args: MythicKeystoneLeaderboardOptions) => Resource;
export type MythicRaidLeaderboardOptions = {
    raid: string;
    faction: 'alliance' | 'horde';
};
export declare const mythicRaidLeaderboard: (namespace: Extract<NamespaceOptions, 'dynamic'>, args: MythicRaidLeaderboardOptions) => Resource;
export type PetOptions = {
    id?: number;
    resource?: 'ability';
    media?: boolean;
};
export declare const pet: (namespace: Extract<NamespaceOptions, 'static'>, args?: null | PetOptions) => Resource;
export type PlayableClassOptions = {
    id?: number;
    media?: boolean;
    pvpTalents?: boolean;
};
export declare const playableClass: (namespace: Extract<NamespaceOptions, 'static' | 'static-classic'>, args?: null | PlayableClassOptions) => Resource;
export type PlayableRaceOptions = {
    id?: number;
};
export declare const playableRace: (namespace: Extract<NamespaceOptions, 'static' | 'static-classic'>, args?: null | PlayableRaceOptions) => Resource;
export type PlayableSpecializationOptions = {
    id?: number;
    media?: boolean;
};
export declare const playableSpecialization: (namespace: Extract<NamespaceOptions, 'static'>, args?: null | PlayableSpecializationOptions) => Resource;
export type PowerTypeOptions = {
    id?: number;
};
export declare const powerType: (namespace: Extract<NamespaceOptions, 'static' | 'static-classic'>, args?: null | PowerTypeOptions) => Resource;
export type ProfessionOptions = {
    id?: number;
    media?: boolean;
    skillTier?: number;
};
export declare const profession: (namespace: Extract<NamespaceOptions, 'static'>, args?: null | ProfessionOptions) => Resource;
export type RecipeOptions = {
    id: number;
    media?: boolean;
};
export declare const recipe: (namespace: Extract<NamespaceOptions, 'static'>, args: RecipeOptions) => Resource;
export type PVPSeasonOptions = {
    id?: number;
    resource?: never;
    bracket?: never;
} | {
    id?: number;
    resource?: 'leaderboard';
    bracket?: string;
} | {
    id: number;
    resource?: 'reward';
    bracket?: never;
};
export declare const pvpSeason: (namespace: Extract<NamespaceOptions, 'dynamic'>, args?: null | PVPSeasonOptions) => Resource;
export type PVPTierOptions = {
    id?: number;
    media?: boolean;
};
export declare const pvpTier: (namespace: Extract<NamespaceOptions, 'static'>, args?: null | PVPTierOptions) => Resource;
export type QuestOptions = {
    id?: number;
    resource?: 'category' | 'area' | 'type';
};
export declare const quest: (namespace: Extract<NamespaceOptions, 'static'>, args?: null | QuestOptions) => Resource;
export type RealmOptions = {
    slug?: string;
};
export declare const realm: (namespace: Extract<NamespaceOptions, 'dynamic' | 'dynamic-classic'>, args?: null | RealmOptions) => Resource;
export type RealmSearchOptions = SearchOptions & {
    timezone?: string;
};
export declare const realmSearch: (namespace: Extract<NamespaceOptions, 'dynamic' | 'dynamic-classic'>, args: RealmSearchOptions) => Resource<SearchParams & {
    timezone?: string;
}>;
export type RegionOptions = {
    id?: number;
};
export declare const region: (namespace: Extract<NamespaceOptions, 'dynamic' | 'dynamic-classic'>, args?: null | RegionOptions) => Resource;
export type ReputationOptions = {
    resource: 'faction' | 'tier';
    id?: number;
};
export declare const reputation: (namespace: Extract<NamespaceOptions, 'static'>, args: ReputationOptions) => Resource;
export type SpellOptions = {
    id: number;
    media?: boolean;
};
export declare const spell: (namespace: Extract<NamespaceOptions, 'static'>, args: SpellOptions) => Resource;
export type SpellSearchOptions<T = string, P = Locales> = SearchOptions & {
    name: T;
    locale: P;
};
export declare const spellSearch: <T extends string, P extends Locales>(namespace: Extract<NamespaceOptions, 'static'>, args: SpellSearchOptions<T, P>) => Resource<SearchParams & Record<`name.${P}`, T>>;
export type TalentOptions = {
    id?: number;
    pvp?: boolean;
};
export declare const talent: (namespace: Extract<NamespaceOptions, 'static'>, args?: null | TalentOptions) => Resource;
export type TechTalentOptions = {
    id?: number;
    tree?: never;
    media?: boolean;
} | {
    id?: number;
    tree?: boolean;
    media?: never;
};
export declare const techTalent: (namespace: Extract<NamespaceOptions, 'static'>, args?: null | TechTalentOptions) => Resource;
export type TitleOptions = {
    id?: number;
};
export declare const title: (namespace: Extract<NamespaceOptions, 'static'>, args?: null | TitleOptions) => Resource;
export type TokenOptions = Record<string, unknown>;
export declare const token: (namespace: Extract<NamespaceOptions, 'dynamic' | 'dynamic-classic'>) => Resource;
export {};
