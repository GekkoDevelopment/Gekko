import { Resource } from './types';
export type CardClass = 'demonhunter' | 'druid' | 'hunter' | 'mage' | 'paladin' | 'priest' | 'rogue' | 'shaman' | 'warlock' | 'warrior' | 'neutral';
export type CardGameMode = 'constructed' | 'battlegrounds' | 'arena' | 'duels';
export type CardMinionType = 'murloc' | 'demon' | 'mech' | 'elemental' | 'beast' | 'totem' | 'pirate' | 'dragon' | 'all';
export type CardSortOrder = 'asc' | 'desc';
export type CardRarity = 'free' | 'common' | 'rare' | 'epic' | 'legendary';
export type CardSortOption = 'manaCost' | 'attack' | 'health' | 'name' | 'dataAdded' | 'groupByClass';
export type CardTier = 1 | 2 | 3 | 4 | 5 | 6 | 'hero' | Array<1 | 2 | 3 | 4 | 5 | 6 | 'hero'>;
export type CardType = 'hero' | 'minion' | 'spell' | 'weapon';
export type CardBackCategory = 'base' | 'fireside' | 'achieve' | 'heroes' | 'season' | 'legend' | 'esports' | 'game_license' | 'promotion' | 'pre_purchase' | 'blizzard' | 'golden' | 'events';
export type CardMetaDataType = 'sets' | 'setGroups' | 'types' | 'rarities' | 'classes' | 'minionTypes' | 'keywords';
export type CardSearchOptions = {
    attack?: number | number[];
    class?: CardClass;
    collectible?: 0 | 1;
    gameMode?: CardGameMode;
    health?: number | number[];
    keyword?: string;
    manaCost?: number | number[];
    minionType?: CardMinionType;
    order?: CardSortOrder;
    page?: number;
    pageSize?: number;
    rarity?: CardRarity;
    set?: string;
    sort?: CardSortOption | `${CardSortOption}:${CardSortOrder}` | Array<`${CardSortOption}:${CardSortOrder}`>;
    textFilter?: string;
    tier?: CardTier;
    type?: CardType;
};
export declare const cardSearch: (args: CardSearchOptions) => Resource<{
    attack?: number | string;
    class?: CardClass;
    collectible?: 0 | 1 | '0,1';
    gameMode?: CardGameMode;
    health?: number | string;
    keyword?: string;
    manaCost?: number | string;
    minionType?: CardMinionType;
    order?: CardSortOrder;
    page?: number;
    pageSize?: number;
    rarity?: CardRarity;
    set?: string;
    sort?: string;
    textFilter?: string;
    tier?: number | 'hero' | string;
    type?: CardType;
}>;
export type CardOptions = {
    id: number | string;
    gameMode?: CardGameMode;
};
export declare const card: (args: CardOptions) => Resource<{
    gameMode?: CardGameMode;
}>;
export type CardBacksOptions = {
    id?: number | string;
    category?: CardBackCategory;
    order?: CardSortOrder;
    sort?: string;
    textFilter?: string;
};
export declare const cardBacks: (args: CardBacksOptions) => Resource<{
    cardBackCategory?: CardBackCategory;
    order?: CardSortOrder;
    sort?: string;
    textFilter?: string;
}>;
export type DeckOptions = {
    code?: string;
    ids?: number | number[];
    hero?: number;
};
export declare const deck: (args: DeckOptions) => Resource<{
    code?: string;
    ids?: number | string;
    hero?: number;
}>;
export type MetaDataOptions = {
    type: CardMetaDataType;
};
export declare const metadata: (args?: null | MetaDataOptions) => Resource;
