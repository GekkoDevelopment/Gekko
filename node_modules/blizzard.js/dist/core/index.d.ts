import { AxiosRequestConfig, AxiosResponse } from 'axios';
import { Locales, Origins } from '../endpoints';
import { Resource, ResourceInterface, ResourceResponse } from '../resources';
export type ClientOptions = {
    key: string;
    secret: string;
    token?: string;
    origin?: Origins;
    locale?: Locales;
};
export type AccessToken = {
    access_token: string;
    token_type: 'bearer';
    expires_in: number;
    scope?: string;
};
export type Headers = {
    [key: string]: string;
};
export interface BlizzardClient {
    setApplicationToken(token: string): void;
    getApplicationToken(args?: {
        origin?: string;
        key?: string;
        secret?: string;
    }): Promise<AxiosResponse<AccessToken>>;
    refreshApplicationToken(args?: {
        origin?: string;
        key?: string;
        secret?: string;
    }): Promise<AxiosResponse<AccessToken>>;
    validateApplicationToken(args?: {
        origin?: string;
        token?: string;
    }): Promise<AxiosResponse<{
        scope?: Array<string>;
        exp: number;
        authorities: Array<{
            authority: string;
        }>;
        client_id: string;
    }>>;
}
export declare abstract class Blizzard implements BlizzardClient {
    version: string;
    ua: string;
    defaults: {
        key: string;
        secret: string;
        token?: string;
        origin: Origins;
        locale: Locales;
    };
    constructor(args: ClientOptions);
    axios: import("axios").AxiosInstance;
    createClientResourceRequest<T = any>(fn: ResourceInterface<T>): (args: Partial<ClientOptions> & T, headers?: Headers) => ResourceResponse;
    prepareResourceRequest(resource: Resource<{
        [key: string]: string | number | boolean;
    }>, args?: Partial<ClientOptions>, headers?: Headers): [string, AxiosRequestConfig];
    getClientResource<T>(url: string, config?: AxiosRequestConfig): Promise<AxiosResponse<T>>;
    setApplicationToken(token: string): void;
    getApplicationToken(args?: {
        origin?: string;
        key?: string;
        secret?: string;
    }): Promise<AxiosResponse<AccessToken>>;
    validateApplicationToken(args?: {
        origin?: string;
        token?: string;
    }): Promise<AxiosResponse<{
        scope?: Array<string>;
        exp: number;
        authorities: Array<{
            authority: string;
        }>;
        client_id: string;
    }>>;
    refreshApplicationToken(args?: {
        origin?: string;
        key?: string;
        secret?: string;
    }): Promise<AxiosResponse<AccessToken>>;
}
