'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var qs = require('querystring');
var axios = require('axios');
var endpoints = require('../endpoints.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var qs__default = /*#__PURE__*/_interopDefaultLegacy(qs);
var axios__default = /*#__PURE__*/_interopDefaultLegacy(axios);

class Blizzard {
    constructor(args) {
        this.version = '4.5.0';
        this.ua = `Node.js/${process.versions.node} Blizzard.js/${this.version}`;
        this.axios = axios__default["default"].create();
        const { origin, locale } = endpoints.getEndpoint(args.origin, args.locale);
        this.defaults = {
            key: args.key,
            secret: args.secret,
            token: args.token,
            origin,
            locale,
        };
    }
    createClientResourceRequest(fn) {
        return (args, headers) => {
            const resource = fn(args);
            const [url, config] = this.prepareResourceRequest(resource, args, headers);
            return this.getClientResource(url, config);
        };
    }
    prepareResourceRequest(resource, args, headers) {
        const config = { ...this.defaults, ...args };
        const endpoint = endpoints.getEndpoint(config.origin, config.locale);
        const namespace = resource.namespace
            ? { 'Battlenet-Namespace': `${resource.namespace}-${endpoint.origin}` }
            : undefined;
        const request = {
            headers: {
                ...headers,
                'User-Agent': this.ua,
                'Content-Type': 'application/json',
                Authorization: `Bearer ${config.token}`,
                ...namespace,
            },
            params: {
                ...resource.params,
                locale: endpoint.locale,
            },
        };
        return [`${endpoint.hostname}/${resource.path}`, request];
    }
    getClientResource(url, config) {
        return this.axios.get(url, config);
    }
    setApplicationToken(token) {
        this.defaults.token = token;
    }
    getApplicationToken(args) {
        const { origin, key, secret } = { ...this.defaults, ...args };
        return this.axios.post(`https://${origin}.battle.net/oauth/token`, null, {
            params: { grant_type: 'client_credentials' },
            auth: {
                username: key,
                password: secret,
            },
            headers: {
                'User-Agent': this.ua,
                'Content-Type': 'application/json',
            },
        });
    }
    validateApplicationToken(args) {
        const { origin, token } = { ...this.defaults, ...args };
        if (!token) {
            throw new Error('`validateApplicationToken` missing required `token` parameter');
        }
        return this.axios.post(`https://${origin}.battle.net/oauth/check_token`, qs__default["default"].stringify({ token }), {
            headers: {
                'User-Agent': this.ua,
                'Content-Type': 'application/x-www-form-urlencoded',
            },
        });
    }
    async refreshApplicationToken(args) {
        const getTokenRequest = await this.getApplicationToken(args);
        this.defaults.token = getTokenRequest.data.access_token;
        return getTokenRequest;
    }
}

exports.Blizzard = Blizzard;
